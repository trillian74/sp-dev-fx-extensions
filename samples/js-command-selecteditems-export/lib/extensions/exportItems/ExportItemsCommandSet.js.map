{"version":3,"sources":["extensions/exportItems/ExportItemsCommandSet.ts"],"names":[],"mappings":"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","file":"extensions/exportItems/ExportItemsCommandSet.js","sourcesContent":["import { override } from '@microsoft/decorators';\r\nimport { Log } from '@microsoft/sp-core-library';\r\nimport {\r\n  BaseListViewCommandSet,\r\n  Command,\r\n  RowAccessor,\r\n  ListViewAccessor,\r\n  IListViewCommandSetListViewUpdatedParameters,\r\n  IListViewCommandSetExecuteEventParameters\r\n} from '@microsoft/sp-listview-extensibility';\r\nimport * as xlsx from 'xlsx';\r\nimport SPField from '@microsoft/sp-page-context/lib/SPField';\r\nimport ListItemAccessor from '@microsoft/sp-listview-extensibility/lib/common/ListItemAccessor';\r\nimport { SPHttpClient, SPHttpClientResponse } from '@microsoft/sp-http';\r\n\r\n/*\r\n?loadSpfx=true&debugManifestsFile=https://localhost:4321/temp/manifests.js&customActions={%22aaa4141f-7829-4b98-af0f-a1e0e6f273fd%22:{%22location%22:%22ClientSideExtension.ListViewCommandSet.CommandBar%22}}\r\n*/\r\n\r\nexport interface IExportItemsCommandSetProperties {\r\n\r\n}\r\n\r\nconst LOG_SOURCE: string = 'ExportItemsCommandSet';\r\n\r\nexport default class ExportItemsCommandSet extends BaseListViewCommandSet<IExportItemsCommandSetProperties> {\r\n  private _wb;\r\n  private _viewColumns: string[];\r\n  private _listTitle: string;\r\n\r\n  @override\r\n  public onInit(): Promise<void> {\r\n    this.Initiate();\r\n    return Promise.resolve();\r\n  }\r\n\r\n  @override\r\n  public onListViewUpdated(event: IListViewCommandSetListViewUpdatedParameters): void {\r\n    const exportCommand: Command = this.tryGetCommand('EXCELEXPORTITEMS_1');\r\n    if (exportCommand) {\r\n      // This command should be hidden unless exactly one row is selected.\r\n      exportCommand.visible = event.selectedRows.length > 0;\r\n    }\r\n  }\r\n\r\n  @override\r\n  public onExecute(event: IListViewCommandSetExecuteEventParameters): void {\r\n    let _grid: any[];\r\n\r\n    // One dirty fix for LinkTitle column internal name\r\n    let index = this._viewColumns.indexOf('LinkTitle');\r\n    if (index !== -1) {\r\n      this._viewColumns[index] = 'Title';\r\n    }\r\n\r\n    switch (event.itemId) {\r\n      case 'EXCELEXPORTITEMS_1':\r\n        if (event.selectedRows.length > 0) {\r\n          _grid = new Array(event.selectedRows.length);\r\n          _grid[0] = this._viewColumns;\r\n\r\n          event.selectedRows.forEach((row: RowAccessor, index: number) => {\r\n            let _row: string[] = [], i: number = 0;\r\n              this._viewColumns.forEach((viewColumn: string) => {\r\n                _row[i++] = this._getFieldValueAsText(row.getValueByName(viewColumn));      \r\n              });  \r\n            _grid[index+1] = _row;\r\n          });\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error('Unknown command');\r\n    }\r\n    this.writeToExcel(_grid);\r\n  }\r\n\r\n  /*\r\n  Some brute force to identify the type of field and return the text value of the field, trying to avoid one more rest call for field types\r\n  Tested, Single line, Multiline, Choice, Number, Boolean, Lookup and Managed metadata, \r\n  */\r\n  private _getFieldValueAsText (field: any): string {\r\n    let fieldValue: string;\r\n    switch (typeof field) {\r\n      case 'object': {                   \r\n        if (field instanceof Array) {\r\n          if(!field.length) {\r\n            fieldValue = '';\r\n          }\r\n          // people\r\n          else if (field[0].title) {\r\n            fieldValue = field.map(value => value.title).join();\r\n          }\r\n          // lookup \r\n          else if (field[0].lookupValue) {\r\n            fieldValue = field.map(value => value.lookupValue).join();\r\n          } \r\n          // managed metadata\r\n          else if (field[0].Label) {\r\n            fieldValue = field.map(value => value.Label).join();\r\n          }   \r\n          // choice and others      \r\n          else {\r\n          fieldValue = field.join();\r\n          }          \r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        fieldValue = field;\r\n      }\r\n    } \r\n    return fieldValue;\r\n  }\r\n\r\n  private writeToExcel(data: any[]): void {\r\n    let ws = xlsx.utils.aoa_to_sheet(data);\r\n    let wb = xlsx.utils.book_new();\r\n    xlsx.utils.book_append_sheet(wb, ws, 'selected-items');\r\n    xlsx.writeFile(wb, `${this._listTitle}.xlsx`);\r\n  }\r\n\r\n  private async getViewColumns() {\r\n    const currentWebUrl: string = this.context.pageContext.web.absoluteUrl;\r\n    this._listTitle = this.context.pageContext.legacyPageContext.listTitle;\r\n    const viewId: string = this.context.pageContext.legacyPageContext.viewId.replace('{','').replace('}','');\r\n    this.context.spHttpClient.get(`${currentWebUrl}/_api/lists/getbytitle('${this._listTitle}')/Views('${viewId}')/ViewFields`, SPHttpClient.configurations.v1)\r\n      .then((res: SPHttpClientResponse) => {\r\n        res.json().then((viewColumnsResponse: any) => {          \r\n          this._viewColumns = viewColumnsResponse.Items;\r\n        });\r\n      });\r\n  }\r\n\r\n  private async Initiate() {\r\n    await this.getViewColumns();\r\n  }\r\n}"],"sourceRoot":"../../../src"}